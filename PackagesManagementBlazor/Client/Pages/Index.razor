@using PackagesManagementBlazor.Client.ViewModels
@using PackagesManagementBlazor.Shared
@using PackagesManagementBlazor.Client.Services
@inject PackagesClient client
@page "/"

<h1>Search packages by location</h1>
<EditForm Model="search"
          OnValidSubmit="Search">
    <DataAnnotationsValidator/>
    <div class="form-group">
        <label for="integerfixed">Insert location starting chars</label>
        <InputText @bind-Value="search.Location"/>
        <ValidationMessage For="@(() => search.Location)"/>
    </div>
    <button type="submit" class="btn btn-primary">
        Search
    </button>
</EditForm>
@if (packages != null)
{
    <div class="table-responsive">
        <table class="table">
            <thead>
            <tr>

                <th scope="col">Destination</th>
                <th scope="col">Name</th>
                <th scope="col">Duration/days</th>
                <th scope="col">Price</th>
                <th scope="col">Available from</th>
                <th scope="col">Available to</th>

            </tr>
            </thead>
            <tbody>
            @foreach (var package in packages)
            {
                <tr>
                    <td>
                        @package.DestinationName
                    </td>
                    <td>
                        @package.Name
                    </td>
                    <td>
                        @package.DurationInDays
                    </td>
                    <td>
                        @package.Price
                    </td>
                    <td>
                        @(package.StartValidityDate.HasValue ?
                            package.StartValidityDate.Value.ToString("d")
                            : string.Empty)
                    </td>
                    <td>
                        @(package.EndValidityDate.HasValue ?
                            package.EndValidityDate.Value.ToString("d")
                            : string.Empty)
                    </td>

                </tr>
            }
            </tbody>
        </table>
    </div>
}
else if (loading)
{
    <p>
        <em>Loading...</em>
    </p>
}

@code{
    SearchViewModel search { get; set; } = new();
    private IEnumerable<PackageInfosViewModel> packages;
    bool loading;

    async Task Search()
    {
        packages = null;
        loading = true;
        await InvokeAsync(StateHasChanged);
        packages = await client.GetByLocation(search.Location);
        loading = false;
    }

}